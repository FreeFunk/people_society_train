package com.edgedo.society.controller;


import java.io.File;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.aliyun.oss.ClientConfiguration;
import com.aliyun.oss.OSSClient;
import com.edgedo.common.base.BaseController;
import com.edgedo.common.shiro.User;
import com.edgedo.common.util.DateUtil;
import com.edgedo.common.util.FileUtil;
import com.edgedo.common.util.Guid;
import com.edgedo.society.entity.SocietySchoolCourse;
import com.edgedo.society.entity.SocietySchoolCourseNode;
import com.edgedo.society.entity.SocietySchoolCourseNodeOption;
import com.edgedo.society.entity.SocietySchoolCourseNodeQuestion;
import com.edgedo.society.mapper.SocietySchoolCourseNodeQuestionMapper;
import com.edgedo.society.queryvo.SocietySchoolCourseNodeQuery;
import com.edgedo.society.queryvo.SocietySchoolCourseNodeView;
import com.edgedo.society.service.SocietySchoolCourseNodeOptionService;
import com.edgedo.society.service.SocietySchoolCourseNodeQuestionService;
import com.edgedo.society.service.SocietySchoolCourseNodeService;
import com.edgedo.society.service.SocietySchoolCourseService;
import com.edgedo.sys.entity.Dtree;
import com.edgedo.tyiyunoosclient.ISysTyiyunCloudStorageService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Api(tags = "SocietySchoolCourseNode")
@Controller
@RequestMapping("/society/societySchoolCourseNode")
public class SocietySchoolCourseNodeController extends BaseController{
	
	@Autowired
	private SocietySchoolCourseNodeService service;
	@Autowired
	private SocietySchoolCourseService societySchoolCourseService;
	@Autowired
	private ISysTyiyunCloudStorageService sysTyiyunCloudStorageService;
	@Autowired
	private SocietySchoolCourseNodeQuestionService societySchoolCourseNodeQuestionService;
	@Autowired
	private SocietySchoolCourseNodeOptionService societySchoolCourseNodeOptionService;

	@Value("${app.tcloudDomain}")
	private String tcloudDomain;


	@Value("${app.tyiYunEndPoint}")
	private String endPoint;
	@Value("${app.tyiYunAccessKeyId}")
	private String accessKeyId;
	@Value("${app.tyiYunAccessKeySecret}")
	private String accessKeySecret;
	@Value("${app.tcloudBucketName}")
	private String bucketName;

	/**
	 * 分页查询
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "分页查询SocietySchoolCourseNode", notes = "分页查询SocietySchoolCourseNode")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listpage",method = RequestMethod.POST)
	public ModelAndView listpage(@ModelAttribute SocietySchoolCourseNodeQuery query){
		ModelAndView modelAndView = new ModelAndView();
		service.listPage(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}

	/**
	 * 学校管理员分页查询
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "分页查询SocietySchoolCourseNode", notes = "分页查询SocietySchoolCourseNode")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/schoollistpage",method = RequestMethod.POST)
	public ModelAndView schoollistpage(@ModelAttribute SocietySchoolCourseNodeQuery query){
		ModelAndView modelAndView = new ModelAndView();
		User user = getLoginUser();
		query.getQueryObj().setOwnerSchoolId(user.getCompId());
		if(query.getOrderBy()==null || query.getOrderBy().equals("")){
			query.setOrderBy("ORDER_NUM ASC");
		}
		service.listPage(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}

	/**
	 * 平台管理员分页查询
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "分页查询SocietySchoolCourseNode", notes = "分页查询SocietySchoolCourseNode")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/ptlistpage",method = RequestMethod.POST)
	public ModelAndView ptlistpage(@ModelAttribute SocietySchoolCourseNodeQuery query){
		ModelAndView modelAndView = new ModelAndView();
		if(query.getOrderBy()==null || query.getOrderBy().equals("")){
			query.setOrderBy("ORDER_NUM ASC");
		}
		service.listPage(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}

	/**
	 * 导入学员的时候判断是否当前已有相关章节和习题
	 * @return
	 */
	@RequestMapping(value = "/selectIsNode",method = RequestMethod.POST)
	public ModelAndView selectIsNode(){
		ModelAndView modelAndView = new ModelAndView();
		User user = getLoginUser();
//		int service.selectIsNode();
		return modelAndView;
	}
	/**
	 * 新增修改
	 * @param voObj
	 * @return
	 */
	@ApiOperation(value = "新增修改SocietySchoolCourseNode", notes = "新增修改SocietySchoolCourseNode")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/saveOrUpdate",method = RequestMethod.POST)
	public ModelAndView saveOrUpdate(SocietySchoolCourseNode voObj){
		ModelAndView modelAndView = new ModelAndView();
		String errMsg = "";
		String id = voObj.getId();
		if(id==null || id.trim().equals("")){
			errMsg = service.insert(voObj);
		}else{
			errMsg = service.update(voObj);
		}
		if(errMsg!=null && !errMsg.equals("")){
			buildErrorResponse(modelAndView, errMsg);
		}else{
			buildResponse(modelAndView);
		}
		return modelAndView;
	}

	/**
	 * 学校管理员新增修改
	 * @param voObj
	 * @return
	 */
	@RequestMapping(value = "/schoolsaveOrUpdate",method = RequestMethod.POST)
	public ModelAndView schoolsaveOrUpdate(SocietySchoolCourseNode voObj){
		ModelAndView modelAndView = new ModelAndView();
		/*String imageUrl = voObj.getImageUrl();
		if(imageUrl!=null && !imageUrl.equals("")){
			File file = new File(temFileForder+imageUrl);
			//oos上要存的文件夹名 图片：image 视频：video
			String oosFilePath = "image"+FileUtil.changeFilePathToWebPath(imageUrl);
			//上传文件返回可以访问的网络路径
			String realPath = sysTyiyunCloudStorageService.upload(oosFilePath,file);
			voObj.setImageUrl(realPath);
		}else {
			voObj.setImageUrl(null);
		}*/
		String fileUrl = voObj.getFileUrl();
		if(fileUrl!=null && !fileUrl.equals("")){
			voObj.setFileUrl(tcloudDomain+"/"+fileUrl);
		}else {
			voObj.setFileUrl(null);
		}
		String errMsg = "";
		String id = voObj.getId();
		if(id==null || id.trim().equals("")){
			//课程ID
			String courseId = voObj.getOwnerCourseId();
			//根据课程id 查出多少章节
			Integer nodeNum = service.selectByClassIdVoNodeNum(courseId);
			voObj.setOrderNum(new BigDecimal(nodeNum+1));
			SocietySchoolCourse course = societySchoolCourseService.loadById(courseId);
			voObj.setOwnerSchoolId(course.getOwnerSchoolId());
			voObj.setOwnerSchoolName(course.getOwnerSchoolName());
			voObj.setOwnerMajorId(course.getOwnerMajorId());
			voObj.setOwnerMajorName(course.getOwnerMajorName());
			voObj.setOwnerCourseClsId(course.getCourseClsId());
			voObj.setOwnerCourseClsName(course.getCourseClsName());
			voObj.setOwnerCourseId(course.getId());
			voObj.setOwnerCourseName(course.getCourseName());
			User user = getLoginUser();
			voObj.setCreateTime(new Date());
			voObj.setCreateUserId(user.getUserId());
			voObj.setCreateUserName(user.getUserName());
			voObj.setDataState("1");
			voObj.setShState("1");
			errMsg = service.insertNew(voObj);
		}else{
			errMsg = service.update(voObj);
		}
		if(errMsg!=null && !errMsg.equals("")){
			buildErrorResponse(modelAndView, errMsg);
		}else{
			buildResponse(modelAndView);
		}
		return modelAndView;
	}

	/**
	 * 批量删除
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "根据ID批量删除SocietySchoolCourseNode", notes = "根据ID批量删除SocietySchoolCourseNode")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/deleteByIds",method = RequestMethod.POST)
	public ModelAndView delete(String ids){
		ModelAndView modelAndView = new ModelAndView();
		String[] arr = ids.split(",");
		List<String> list = new ArrayList<String>();
		for(String str : arr){
			list.add(str);
		}
		service.deleteByIds(list);
		return buildResponse(modelAndView);
	}
	
	
	/**
	 * 根据主键加载
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "根据ID加载SocietySchoolCourseNode", notes = "根据ID加载SocietySchoolCourseNode")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/loadById",method = RequestMethod.POST)
	public ModelAndView  loadById(String id){
		ModelAndView modelAndView = new ModelAndView();
		return buildResponse(modelAndView, service.loadById(id));
	}


	/*
	* 查询学员的小节的进度
	* */
	@RequestMapping(value = "/selectStuNodeProgress",method = RequestMethod.POST)
	public ModelAndView  selectStuNodeProgress(SocietySchoolCourseNodeQuery query){
		ModelAndView modelAndView = new ModelAndView();
		if(query.getOrderBy()==null || query.getOrderBy().equals("")){
			query.setOrderBy("ORDER_NUM ASC");
		}
		service.selectStuNodeProgress(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}

	/**
	 * 逻辑删除
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/updateByIds",method = RequestMethod.POST)
	public ModelAndView updateByIds(String ids,String courseId){
		ModelAndView modelAndView = new ModelAndView();
		String[] arr = ids.split(",");
		List<String> list = new ArrayList<String>();
		for(String str : arr){
			//删除oss相关的视频
			SocietySchoolCourseNode societySchoolCourseNode = service.loadById(str);
			//查询当前课程有没有重复的章节 根据课程id 和章节名
			int flag =
					service.selectByCourseNameAndId
							(societySchoolCourseNode.getOwnerCourseId(),societySchoolCourseNode.getNodeName());
			if(flag==1){//证明有多个一样的章节  只修改状态 不删除oos视频
				if(societySchoolCourseNode.getFileUrl()!=null && !societySchoolCourseNode.getFileUrl().equals("")){
					String[] strArr = societySchoolCourseNode.getFileUrl().split(tcloudDomain+"/");
					sysTyiyunCloudStorageService.deleteObject(strArr[1]);
				}
			}
			list.add(str);
		}
		service.updateByIds(list,courseId);
		return buildResponse(modelAndView);
	}

	/***
	 * 删除oos临时文件
	 * @param tempFileName
	 * @return
	 */
	@RequestMapping(value = "/deleteTempFileName",method = RequestMethod.POST)
	public ModelAndView deleteTempFileName(String tempFileName){
		ModelAndView modelAndView = new ModelAndView();
		sysTyiyunCloudStorageService.deleteObject(tempFileName);
		return buildResponse(modelAndView);
	}

	/**
	 * 根据课程id和学校ID查询课程下的章节
	 * @param schoolId courseId
	 * @return
	 */
	@RequestMapping(value = "/listByCourseIdAndSchoolId",method = RequestMethod.POST)
	public ModelAndView  listByCourseIdAndSchoolId(String courseId,String schoolId){
		ModelAndView modelAndView = new ModelAndView();
		List<Dtree> dtreeList = service.listByMajorIdAndSchoolId(courseId,schoolId);
		return buildResponse(modelAndView, dtreeList);
	}

	/**
	 * 1.根据想要导入的课程id 查出所有的相关课程章节的记录
	 * 2.并且执行copyObject复制oos上的视频文件
	 * 3.在根据当前的被导入的课程id 上升数据库
	 * @param courseId
	 * @param schoolId
	 * @param majorId
	 * @param courseClsId
	 * @param nodeIdList
	 * @param courseNamePinYin
	 * @return
	 */
	@RequestMapping(value = "/copyCourseAndNode",method = RequestMethod.POST)
	public ModelAndView  copyCourseAndNode(String courseId,String schoolId,
										   String majorId,String courseClsId,String nodeIdList,
										   String courseNamePinYin,String courseIdOld){
		ModelAndView modelAndView = new ModelAndView();
		User user = getLoginUser();
		service.insertCopyNodeAndQuestionAndOption( courseId, schoolId, majorId,
				courseClsId, nodeIdList, courseNamePinYin, courseIdOld,user);
		return buildResponse(modelAndView);
	}

	/**
	 * @Author QiuTianZhu
	 * @Description: 替换课程章节的视频url地址
	 * @Param:
	 * @return:
	 * @Date 2020/7/23 15:59
	 **/
	@RequestMapping(value = "/updateVideoUrl",method = RequestMethod.POST)
	public ModelAndView  updateVideoUrl(SocietySchoolCourseNode voObj){
		ModelAndView modelAndView = new ModelAndView();
		service.update(voObj);
		return buildResponse(modelAndView);
	}

}
