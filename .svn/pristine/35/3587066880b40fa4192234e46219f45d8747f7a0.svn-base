package com.edgedo.society.controller;


import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.edgedo.common.base.BaseController;
import com.edgedo.common.base.annotation.Pass;
import com.edgedo.common.shiro.User;
import com.edgedo.common.util.DateUtil;
import com.edgedo.common.util.FileUtil;
import com.edgedo.common.util.Guid;
import com.edgedo.society.entity.*;
import com.edgedo.society.queryvo.*;
import com.edgedo.society.service.*;
import com.edgedo.sys.entity.Dtree;
import com.edgedo.sys.entity.SysUser;
import com.edgedo.sys.queryvo.SysUserView;
import com.edgedo.sys.queryvo.SysXianquQuery;
import com.edgedo.sys.service.SysUserService;
import com.edgedo.sys.service.SysXianquService;
import com.edgedo.tyiyunoosclient.ISysTyiyunCloudStorageService;
import com.microsoft.schemas.office.office.STInsetMode;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import net.sourceforge.pinyin4j.PinyinHelper;
import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;
import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;


@Api(tags = "SocietySchool")
@Controller
@RequestMapping("/society/societySchool")
public class SocietySchoolController extends BaseController{
	
	@Autowired
	private SocietySchoolService service;

	@Autowired
	private SysXianquService sysXianquService;

	@Autowired
	private SysUserService sysUserService;

	@Autowired
	private ISysTyiyunCloudStorageService sysTyiyunCloudStorageService;

	@Autowired
	private SocietySchoolMajorService societySchoolMajorService;

	@Autowired
	private SocietySchoolClassService societySchoolClassService;

	@Autowired
	private SocietySchoolCourseService societySchoolCourseService;

	@Autowired
	private SocietyStudentService societyStudentService;
	@Autowired
	private SocietyStudentAndCourseService societyStudentAndCourseService;

	@Autowired
	private SocietySchoolCourseUseGlobleService societySchoolCourseUseGlobleService;


	@Value("${app.server.fileForder}")
	private String fileForder;
	/**
	 * 分页查询
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "分页查询SocietySchool", notes = "分页查询SocietySchool")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listpage",method = RequestMethod.POST)
	public ModelAndView listpage(@ModelAttribute SocietySchoolQuery query){
		ModelAndView modelAndView = new ModelAndView();
		service.listPage(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}

	/**
	 *@Author:TWQ
	 *@Description:加载学校菜单树
	 *@DateTime: 2020-5-17 12:10:40
	 */
	@RequestMapping(value = "/listSchoolDtree",method = RequestMethod.POST)
	public ModelAndView listSchoolDtree(){
		ModelAndView modelAndView = new ModelAndView();
		List<Dtree> dtreeList = service.listSchoolDtree();
		return buildDtreeResponse(modelAndView,dtreeList);
	}


	/**
	 *@Author:QTZ
	 *@Description:加载学校菜单树
	 */
	@RequestMapping(value = "/listSchoolClassInfoDtree",method = RequestMethod.POST)
	public ModelAndView listSchoolClassInfoDtree(){
		ModelAndView modelAndView = new ModelAndView();
		List<Dtree> dtreeList = service.listSchoolClassInfoDtree();
		return buildDtreeResponse(modelAndView,dtreeList);
	}

	/**
	 * 人社首页，学校、班级、课程、学员，数量统计查询
	 * @param query
	 * @return
	 */
	@RequestMapping(value = "/listForPeopleSocietyHome",method = RequestMethod.POST)
	public ModelAndView listForPeopleSocietyHome(@ModelAttribute SocietySchoolQuery query){
		ModelAndView modelAndView = new ModelAndView();
		Map map = new HashMap();
		//获取当前用户id
		User user = getLoginUser();
		//学校统计
		int schoolNum = service.countSchoolAllNum();
		//班级统计
		int classNum = societySchoolClassService.countClassAllNum();
		//课程统计
		int courseNum = societySchoolCourseService.countCourseAllNum();
		//学员统计
		int studentNum = societyStudentService.countStudentAllNum();
		map.put("schoolNum",schoolNum);
		map.put("classNum",classNum);
		map.put("courseNum",courseNum);
		map.put("studentNum",studentNum);
		buildResponse(modelAndView,map);
		return modelAndView;
	}

	/**
	 * 首页，专业、班级、课程、学员，数量统计查询
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "首页，专业、班级、课程、学员，数量统计查询", notes = "首页，专业、班级、课程、学员，数量统计查询")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listForSchoolHome",method = RequestMethod.POST)
	public ModelAndView listForSchoolHome(@ModelAttribute SocietySchoolQuery query){
		ModelAndView modelAndView = new ModelAndView();
		Map map = new HashMap();
		//获取当前用户id
		User user = getLoginUser();
		//专业统计
		SocietySchoolMajorQuery societySchoolMajorQuery = new SocietySchoolMajorQuery();
		societySchoolMajorQuery.getQueryObj().setOwnerSchoolId(user.getCompId());
		societySchoolMajorQuery.getQueryObj().setDataState("1");
		int zy = societySchoolMajorService.count(societySchoolMajorQuery);
		//班级统计
		SocietySchoolClassQuery societySchoolClassQuery = new SocietySchoolClassQuery();
		societySchoolClassQuery.getQueryObj().setOwnerSchoolId(user.getCompId());
		societySchoolClassQuery.getQueryObj().setDataState("1");
		int bj = societySchoolClassService.count(societySchoolClassQuery);
		//课程统计
		SocietySchoolCourseQuery societySchoolCourseQuery = new SocietySchoolCourseQuery();
		societySchoolCourseQuery.getQueryObj().setOwnerSchoolId(user.getCompId());
		societySchoolCourseQuery.getQueryObj().setDataState("1");
		int kc = societySchoolCourseService.count(societySchoolCourseQuery);
		//学员统计
		SocietyStudentQuery societyStudentQuery = new SocietyStudentQuery();
		societyStudentQuery.getQueryObj().setOwnerSchoolId(user.getCompId());
		societyStudentQuery.getQueryObj().setDataState("1");
		int xy = societyStudentService.count(societyStudentQuery);
		//课程学习人次统计
		int kcStuNum = societyStudentAndCourseService.countCourseStuNum(user.getCompId());


		map.put("zy",zy);
		map.put("bj",bj);
		map.put("kc",kc);
		map.put("xy",xy);
		map.put("kcStuNum",kcStuNum);
		buildResponse(modelAndView,map);
		return modelAndView;
	}

	@RequestMapping(value = "/schoolAdminListpage",method = RequestMethod.POST)
	public ModelAndView schoolAdminListpage(@ModelAttribute SocietySchoolQuery query){
		ModelAndView modelAndView = new ModelAndView();
		//获取当前用户id
		User user = getLoginUser();
		query.getQueryObj().setSysUserId(user.getUserId());
		service.schoolAdminlistpage(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}


	/**
	 * 查询所有的学校信息
	 * @param query
	 * @return
	 */
	@RequestMapping(value = "/listAll",method = RequestMethod.POST)
	public ModelAndView listAll(@ModelAttribute SocietySchoolQuery query){
		ModelAndView modelAndView = new ModelAndView();
		List<SocietySchoolView> societySchoolList = service.listByObj(query);
		buildResponse(modelAndView,societySchoolList);
		return modelAndView;
	}
	
	/**
	 * 批量删除
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "根据ID批量删除SocietySchool", notes = "根据ID批量删除SocietySchool")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/deleteByIds",method = RequestMethod.POST)
	public ModelAndView delete(String ids){
		ModelAndView modelAndView = new ModelAndView();
		String[] arr = ids.split(",");
		List<String> list = new ArrayList<String>();
		for(String str : arr){
			list.add(str);
		}
		service.deleteByIds(list);		
		return buildResponse(modelAndView);
	}

	/**
	 * 批量逻辑删除
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/logicDeleteByIds",method = RequestMethod.POST)
	public ModelAndView logicDeleteByIds(String ids){
		ModelAndView modelAndView = new ModelAndView();
		String[] arr = ids.split(",");
		List<String> list = new ArrayList<String>();
		for(String str : arr){
			list.add(str);
		}
		service.logicDelete(list);
		return buildResponse(modelAndView);
	}
	
	
	/**
	 * 根据主键加载
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "根据ID加载SocietySchool", notes = "根据ID加载SocietySchool")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/loadById",method = RequestMethod.POST)
	public ModelAndView  loadById(String id){
		ModelAndView modelAndView = new ModelAndView();
		return buildResponse(modelAndView, service.loadById(id));
	}

	@RequestMapping(value = "/updateOldSchoolInfo",method = RequestMethod.POST)
	public ModelAndView updateOldSchoolInfo(SocietySchool societySchool){
		ModelAndView modelAndView = new ModelAndView();
		User loginUser = getLoginUser();
		String compId = loginUser.getCompId();
		String schoolAppLoginImg= societySchool.getSchoolAppLoginImg();
		if(schoolAppLoginImg !=null && !schoolAppLoginImg.equals("")){
			String filePath = "";
			String rpath = "/"+compId+"/applogin";
			File file = new File(schoolAppLoginImg);
			try {
				filePath = rpath+FileUtil.saveFile(file,fileForder+rpath,true);
				//删除临时文件
				file.delete();
			} catch (Exception e) {
				e.printStackTrace();
			}
			societySchool.setSchoolAppLoginImg(filePath);
		}
		service.updateById(societySchool);
		return buildResponse(modelAndView);
	}


	/**
	 * 新添加的学校信息
	 * @param societySchool 前台传来封装的学校信息对象
	 * @return
	 */
	@RequestMapping(value = "/addNewSchoolInfo",method = RequestMethod.POST)
	public ModelAndView addNewSchoolInfo(SocietySchool societySchool){
		ModelAndView modelAndView = new ModelAndView();
		String compId = societySchool.getId();
		String schoolAppLoginImg= societySchool.getSchoolAppLoginImg();
		if(schoolAppLoginImg !=null && !schoolAppLoginImg.equals("")){
			String filePath = "";
			String rpath = "/"+compId+"/applogin";
			File file = new File(schoolAppLoginImg);
			try {
				filePath = rpath+FileUtil.saveFile(file,fileForder+rpath,true);
				//删除临时文件
				file.delete();
			} catch (Exception e) {
				e.printStackTrace();
			}
			societySchool.setSchoolAppLoginImg(filePath);
		}
		//获取当前操作信息
		User user = getLoginUser();
		societySchool.setCreateUserId(user.getUserId());//用户人id
		societySchool.setCreateTime(new Date());//创建时间
		societySchool.setCreateUserName(user.getUserName());//用户人姓名
		//设置位置信息
		Map<String,String> addressMap = getAddressInfo(societySchool.getXianquName());
		societySchool.setProvinceId(addressMap.get("proviceId"));
		societySchool.setProvinceName(addressMap.get("proviceName"));
		societySchool.setCityId(addressMap.get("cityId"));
		societySchool.setCityName(addressMap.get("cityName"));
		societySchool.setXianquId(addressMap.get("xianquNameId"));
		societySchool.setXianquName(addressMap.get("xianquName"));
		//设置学校主键  依据学校名字全拼 AAAA
		String schoolNewName = getPinYinHeadChar(societySchool.getSchoolName()).toLowerCase();
		//设置状态
		societySchool.setDataState("1");
		//判断数据库是否存在
		List<String> oldSchoolNameList = service.selectIsSchoolName(schoolNewName);
		if(oldSchoolNameList.size() >= 1){
			//作为后面判断list是否包含重复主键
			String isSchoolNewName = schoolNewName + String.valueOf((int)((Math.random()*9+1)*1000));
			if(oldSchoolNameList.contains(isSchoolNewName)){//包含 将第一次的随机数+1
				String regEx="[^0-9]";
				Pattern pattern = Pattern.compile(regEx);
				Matcher matcher = pattern.matcher(isSchoolNewName);
				//字符串转数字
				Integer newSchoolName = new Integer(matcher.replaceAll("").trim());
				societySchool.setId(schoolNewName+(newSchoolName+1));
			}else {//不包含 直接用第一次的随机4位数绑定
				societySchool.setId(isSchoolNewName);
			}
		}else {
			//上传数据库
			societySchool.setId(schoolNewName);
		}
		//同时维护一个学校管理员信息
		//用户名 密码 用户权限id compid
		SysUser sysUser = new SysUser();
		SysUserView sysUserView = sysUserService.getAdminUserByCode(societySchool.getUserCode());
		if(sysUserView != null){
			modelAndView.addObject("success", false);
			modelAndView.addObject("errMsg", "账号重复使用!");
			modelAndView.addObject("code", "0");
			return modelAndView;
		}
		//账号即为用户账号
		sysUser.setUserCode(societySchool.getUserCode());
		sysUser.setPhone(societySchool.getContactPhoneNum());
		//密码默认123456
		sysUser.setPassword("123456");
		//用户权限id
		sysUser.setDefaultRoleId(societySchool.getSchoolType());
		sysUser.setCompId(schoolNewName);//学校全拼
		//省 市 县
		sysUser.setProvinceId(addressMap.get("proviceId"));
		sysUser.setProvinceName(addressMap.get("proviceName"));
		sysUser.setCityId(addressMap.get("cityId"));
		sysUser.setCityName(addressMap.get("cityName"));
		sysUser.setXianquId(addressMap.get("xianquNameId"));
		sysUser.setXianquName(addressMap.get("xianquName"));
		sysUser.setUserName(societySchool.getSchoolName());//学校姓名
		//默认性别男
		sysUser.setUserSex("0");
		sysUserService.insert(sysUser);
		//关联用户表id
		societySchool.setSchoolNamePrefix(societySchool.getId());
		societySchool.setSysUserId(sysUser.getId());
		service.insertNewSchoolInfo(societySchool);
		return buildResponse(modelAndView);
	}

	/**
	 * 整理县区位置信息
	 * @param xianquIdAndxianquName 县区名+id(逗号分隔) 12313,海港区
	 * @return
	 */
	private Map<String, String> getAddressInfo(String xianquIdAndxianquName) {
		Map<String,String> addressMap = new HashMap<>();
		//省
		addressMap.put("proviceId","HEBEI");
		addressMap.put("proviceName","河北省");
		//市
		addressMap.put("cityId","130300");
		addressMap.put("cityName","秦皇岛市");
		//县区
		if(xianquIdAndxianquName != null && !xianquIdAndxianquName.equals("")){
			String[] xianquNameArr = xianquIdAndxianquName.split(",");
			addressMap.put("xianquNameId",xianquNameArr[0]);
			addressMap.put("xianquName",xianquNameArr[1]);
		}else {
			addressMap.put("","");
			addressMap.put("","");
		}
		return addressMap;
	}

	/**
	 * 构造学校名字简称
	 * @param schoolName 学校中文名字
	 * @return 全拼简称
	 */
	private String getSchoolNameAbbreviation(String schoolName,boolean isFull) {
		/***
		 * ^[\u2E80-\u9FFF]+$ 匹配所有东亚区的语言
		 * ^[\u4E00-\u9FFF]+$ 匹配简体和繁体
		 * ^[\u4E00-\u9FA5]+$ 匹配简体
		 */
		String regExp="^[\u4E00-\u9FFF]+$";
		StringBuffer sb=new StringBuffer();
		//判断是否为空，去掉前后空格
		if(schoolName==null||"".equals(schoolName.trim())){
			return "";
		}
		String pinyin="";
		//字符循环，逐字转换
		for(int i=0;i<schoolName.length();i++){
			char unit=schoolName.charAt(i);
			//是汉字，则转拼音
			if(match(String.valueOf(unit),regExp)){
				pinyin=convertSingleHanzi2Pinyin(unit);
				//因为convertSingleHanzi2Pinyin方法体里面转换过来是拼音形式
				if(isFull){
					sb.append(pinyin);
				}else {
					sb.append(pinyin.charAt(0));
				}
			}else{
				sb.append(unit);
			}
		}
		//返回小写字体
		return sb.toString();
	}

	/**
	 * 根据字符和正则表达式进行匹配
	 * @param str 源字符串
	 * @param regex 正则表达式
	 * @return
	 */
	private static boolean match(String str,String regex){
		Pattern pattern= Pattern.compile(regex);
		Matcher matcher=pattern.matcher(str);
		return matcher.find();
	}

	/**
	 * 将汉字转成拼音
	 * <P>
	 * 取首字母或全拼
	 *
	 * @param hanzi 汉字字符串
	 * @return 拼音
	 */
	private static String convertSingleHanzi2Pinyin(char hanzi){
		HanyuPinyinOutputFormat outputFormat = new HanyuPinyinOutputFormat();
		outputFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
		String[] res;
		StringBuffer sb=new StringBuffer();
		try {
			res = PinyinHelper.toHanyuPinyinStringArray(hanzi,outputFormat);
			sb.append(res[0]);//对于多音字，只用第一个拼音
		} catch (Exception e) {
			e.printStackTrace();
			return "";
		}
		return sb.toString();
	}

	/**
	 * 查询县区关联
	 * @return
	 */
	@RequestMapping(value = "/listAllXianQu",method = RequestMethod.POST)
	public ModelAndView listAllXianQu(){
		ModelAndView modelAndView = new ModelAndView();
		List list = sysXianquService.selectAllXianqu();
		buildResponse(modelAndView,list);
		return modelAndView;
	}


	/*@RequestMapping(value = "/uploadImg",method = RequestMethod.POST)
	public ModelAndView uploadImg(MultipartFile file, HttpServletRequest request){
		ModelAndView modelAndView = new ModelAndView();
		try{
			//保存到临时文件目录
			String fileTempPath = FileUtil.saveFile(file,temFileForder,false);
			Map<String,Object> map2=new HashMap<>();
			Map<String,Object> map=new HashMap<>();
			map.put("code",0);
			map.put("msg","");
			map.put("data",map2);
			map2.put("src",fileTempPath);
			return buildResponse(modelAndView,map);
		}catch (Exception e){
			e.printStackTrace();
		}
		Map<String,Object> map=new HashMap<>();
		map.put("code",1);
		map.put("msg","");
		return buildResponse(modelAndView,map);
	}*/

	/**
	 * 删除图片logo
	 * @return
	 */
	@RequestMapping(value = "/deleteImgByAddress",method = RequestMethod.POST)
	public ModelAndView deleteImgByAddress(String imgAddressName){
		ModelAndView modelAndView = new ModelAndView();
		File file = new File(imgAddressName);
		if (file.exists()) {
			file.delete();
		}
		return buildResponse(modelAndView);
	}


/*	@RequestMapping(value = "/test",method = RequestMethod.GET)
	@Pass*/
	public ModelAndView test() throws FileNotFoundException {
		ModelAndView modelAndView = new ModelAndView();
		//要上传的文件
		File file = new File("E:\\tmp\\test.jpg");
		String fileName = file.getName();
		//获取文件后缀名
		String suffix = fileName.substring(fileName.lastIndexOf("."));
		//oos上要存的文件夹名 图片：image 视频：video
		String oosDir = "image";
		String dateStr = DateUtil.getStrDateByFormat(new Date(),"yyyy/MM/dd");
		//guid新的文件名
		String guid = Guid.guid();
		//oos上文件全路径带文件名
		String oosFilePath = oosDir+"/"+dateStr+"/"+guid+suffix;
		//上传文件返回可以访问的网络路径
		String realPath = sysTyiyunCloudStorageService.upload(oosFilePath,file);
		System.out.println(realPath);
		return modelAndView;
	}




	/**
	 * 得到中文首字母
	 *
	 * @param str
	 * @return
	 */
	public static String getPinYinHeadChar(String str) {

		String convert = "";
		for (int j = 0; j < str.length(); j++) {
			char word = str.charAt(j);
			String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(word);
			if (pinyinArray != null) {
				convert += pinyinArray[0].charAt(0);
			} else {
				convert += word;
			}
		}
		return convert;
	}

	/**
	 * @Author QiuTianZhu
	 * @Description: 查询所有的学校展示下拉框
	 * @Param:
	 * @return:
	 * @Date 2020/7/22 15:47
	 **/
	@RequestMapping(value = "/listSchool",method = RequestMethod.POST)
	public ModelAndView listSchool(){
		ModelAndView modelAndView = new ModelAndView();
		User user = getLoginUser();
		List<SocietySchool> list = service.selectByNotOwnSchoolAll(user.getCompId());
		return buildResponse(modelAndView,list);
	}


	/**
	 * 根据学校id 和 课程id 查询每个学校学习这个课程的所有人数
	 * @param query
	 * @return
	 */
	@RequestMapping(value = "/SchoolCourseStudyListTablelistpage",method = RequestMethod.POST)
	public ModelAndView SchoolCourseStudyListTablelistpage(@ModelAttribute SocietySchoolQuery query){
		ModelAndView modelAndView = new ModelAndView();
		//查出所有学校
		service.listPageCourseCount(query);
		buildResponse(modelAndView,query);
		return buildResponse(modelAndView,query);
	}

	/**
	 * 根据学校id 和 课程id 时间区间 查询每个学校学习这个课程的所有人数
	 * @param query
	 * @return
	 */
	@RequestMapping(value = "/MonthSchoolCourseStudyListTablelistpage",method = RequestMethod.POST)
	public ModelAndView MonthSchoolCourseStudyListTablelistpage(@ModelAttribute SocietySchoolQuery query){
		ModelAndView modelAndView = new ModelAndView();
		if(query.getQueryObj().getMonth()==null || query.getQueryObj().getMonth().equals("")){
			//默认当前月份
			String startDay = getMonthFirstDay(new Date());
			String endDay = getMonthLastDay(new Date());
			query.getQueryObj().setMonthDayStart(startDay);
			query.getQueryObj().setMonthDayEnd(endDay);
		}else {
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM");
			String startDay = null;
			String endDay = null;
			try {
				startDay = getMonthFirstDay(simpleDateFormat.parse(query.getQueryObj().getMonth()));
				endDay = getMonthLastDay(simpleDateFormat.parse(query.getQueryObj().getMonth()));
			} catch (ParseException e) {
				e.printStackTrace();
			}

			query.getQueryObj().setMonthDayStart(startDay);
			query.getQueryObj().setMonthDayEnd(endDay);
		}
		//查出所有学校
		service.listPageCourseMonthCount(query);
		buildResponse(modelAndView,query);
		return buildResponse(modelAndView,query);
	}

	/**
	 * 获取当前时间月份的最后一天
	 *
	 * @param nowTime
	 * @return
	 */
	private static String getMonthLastDay(Date nowTime) {
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Calendar now = Calendar.getInstance();
		now.setTime(nowTime);
		now.add(Calendar.DATE, -1);
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String date = simpleDateFormat.format(nowTime);
		Calendar calendar = Calendar.getInstance();
		try {
			calendar.setTime(simpleDateFormat.parse(date));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		calendar.add(Calendar.MONTH, 1);
		calendar.set(Calendar.DATE, 1);
		calendar.add(Calendar.DATE, -1);
		String day_last = df.format(calendar.getTime());
		StringBuffer endStr = new StringBuffer().append(day_last);
		day_last = endStr.toString();
		StringBuffer str = new StringBuffer().append(day_last);
		return str.toString();

	}



	/**
	 * 获取当前时间月份的第一天
	 *
	 * @param nowTime
	 * @return
	 */
	private static String getMonthFirstDay(Date nowTime) {
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(nowTime);
		Date theDate = calendar.getTime();
		GregorianCalendar gcLast = (GregorianCalendar) Calendar.getInstance();
		gcLast.setTime(theDate);
		gcLast.set(Calendar.DAY_OF_MONTH, 1);
		String day_first = df.format(gcLast.getTime());
		StringBuffer str = new StringBuffer().append(day_first);
		return str.toString();
	}


}
