package com.edgedo.society.controller;


import java.util.ArrayList;
import java.util.List;

import com.edgedo.common.base.BaseController;
import com.edgedo.common.shiro.User;
import com.edgedo.society.entity.SocietySchool;
import com.edgedo.society.entity.SocietyStudentAndCourse;
import com.edgedo.society.queryvo.SocietySchoolQuery;
import com.edgedo.society.queryvo.SocietySchoolView;
import com.edgedo.society.queryvo.SocietyStudentAndCourseQuery;
import com.edgedo.society.queryvo.SocietyStudentAndCourseView;
import com.edgedo.society.service.SocietySchoolClassAdminService;
import com.edgedo.society.service.SocietySchoolClassService;
import com.edgedo.society.service.SocietySchoolService;
import com.edgedo.society.service.SocietyStudentAndCourseService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;


@Api(tags = "SocietyStudentAndCourse")
@Controller
@RequestMapping("/society/societyStudentAndCourse")
public class SocietyStudentAndCourseController extends BaseController{
	
	@Autowired
	private SocietyStudentAndCourseService service;
	@Autowired
	private SocietySchoolService societySchoolService;
	@Autowired
	private SocietySchoolClassAdminService societySchoolClassAdminService;
	@Autowired
	private SocietySchoolClassService societySchoolClassService;

	
	/**
	 * 分页查询
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "分页查询SocietyStudentAndCourse", notes = "分页查询SocietyStudentAndCourse")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listpage",method = RequestMethod.POST)
	public ModelAndView listpage(@ModelAttribute SocietyStudentAndCourseQuery query){
		ModelAndView modelAndView = new ModelAndView();
		service.listPage(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}

	/**
	 * 分页查询,学校管理员
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "分页查询SocietyStudentAndCourse", notes = "分页查询SocietyStudentAndCourse")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listpageforschool",method = RequestMethod.POST)
	public ModelAndView listpageforschool(@ModelAttribute SocietyStudentAndCourseQuery query){
		if (query.getQueryObj().getCourseProgressStart()==null){
			query.getQueryObj().setCourseProgressStart(0);
			query.getQueryObj().setCourseProgressEnd(100);
		}
		ModelAndView modelAndView = new ModelAndView();
		User user = getLoginUser();
		query.getQueryObj().setOwnerSchoolId(user.getCompId());
		if(query.getOrderBy()==null || query.getOrderBy().equals("")){
			query.setOrderBy("COURSE_PROGRESS ASC");
		}
		service.listPage(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}


	/**
	 * 班主任下的班级的到课统计
	 * @param query
	 * @return
	 */
	@RequestMapping(value = "/listpageforclassadmin",method = RequestMethod.POST)
	public ModelAndView listpageforclassadmin(@ModelAttribute SocietyStudentAndCourseQuery query){
		if (query.getQueryObj().getCourseProgressStart()==null){
			query.getQueryObj().setCourseProgressStart(0);
			query.getQueryObj().setCourseProgressEnd(100);
		}
		ModelAndView modelAndView = new ModelAndView();
		User user = getLoginUser();;
		query.getQueryObj().setOwnerSchoolId(user.getCompId());
		if(query.getOrderBy()==null || query.getOrderBy().equals("")){
			query.setOrderBy("COURSE_PROGRESS ASC");
		}
		String classAdminId = societySchoolClassAdminService.selectBySysUserId(user.getUserId());
		List<String> classId = societySchoolClassService.selectByClassAdminId(classAdminId);
		if(classId.size()==0){
			return buildResponse(modelAndView,query);
		}else {
			query.setClassIdList(classId);
			service.forclassadminlistPage(query);
			buildResponse(modelAndView,query);
			return modelAndView;
		}
	}

	/**
	 * 不分页查询,学校管理员
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "不分页查询SocietyStudentAndCourse", notes = "不分页查询SocietyStudentAndCourse")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listByObjforschool",method = RequestMethod.POST)
	public ModelAndView listByObjforschool(@ModelAttribute SocietyStudentAndCourseQuery query){
		ModelAndView modelAndView = new ModelAndView();
		User user = getLoginUser();;
		query.getQueryObj().setOwnerSchoolId(user.getCompId());
		if(query.getOrderBy()==null || query.getOrderBy().equals("")){
			query.setOrderBy("COURSE_PROGRESS ASC");
		}
		service.listByExcObj(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}

	/**
	 * 分页查询,人社角色
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "分页查询SocietyStudentAndCourse", notes = "分页查询SocietyStudentAndCourse")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listpageforpeoplesociety",method = RequestMethod.POST)
	public ModelAndView listpageforpeoplesociety(@ModelAttribute SocietyStudentAndCourseQuery query){
		//初始化到课率区间
		if (query.getQueryObj().getCourseProgressStart()==null){
			query.getQueryObj().setCourseProgressStart(0);
			query.getQueryObj().setCourseProgressEnd(100);
		}
		ModelAndView modelAndView = new ModelAndView();
		//根据学校名称查询学校id
		if(query.getQueryObj().getOwnerSchoolId()!=null&&query.getQueryObj().getOwnerSchoolId().length()>0){
			SocietySchoolQuery qq = new SocietySchoolQuery();
			qq.getQueryObj().setSchoolName(query.getQueryObj().getOwnerSchoolId());
			societySchoolService.listPage(qq);
			if(qq.getList().size()>0){
				List<SocietySchoolView> listS = qq.getList();
				query.getQueryObj().setOwnerSchoolId(listS.get(0).getId());
			}
		}

		/*if(query.getOrderBy()==null || query.getOrderBy().equals("")){
			query.setOrderBy("COURSE_PROGRESS ASC");
		}*/
		service.listPage(query);
		//查询学校名称
		List<SocietyStudentAndCourseView> listV = query.getList();
		for(SocietyStudentAndCourseView view : listV){
			SocietySchool ss = societySchoolService.loadById(view.getOwnerSchoolId());
			view.setOwnerSchoolId(ss.getSchoolName());
		}

		buildResponse(modelAndView,query);
		return modelAndView;
	}

	/**
	 * 不分页查询,人社角色
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "不分页查询SocietyStudentAndCourse", notes = "不分页查询SocietyStudentAndCourse")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listByObjforpeoplesociety",method = RequestMethod.POST)
	public ModelAndView listByObjforpeoplesociety(@ModelAttribute SocietyStudentAndCourseQuery query){
		ModelAndView modelAndView = new ModelAndView();
		//根据学校名称查询学校id
		if(query.getQueryObj().getOwnerSchoolId()!=null&&query.getQueryObj().getOwnerSchoolId().length()>0){
			SocietySchoolQuery qq = new SocietySchoolQuery();
			qq.getQueryObj().setSchoolName(query.getQueryObj().getOwnerSchoolId());
			societySchoolService.listPage(qq);
			if(qq.getList().size()>0){
				List<SocietySchoolView> listS = qq.getList();
				query.getQueryObj().setOwnerSchoolId(listS.get(0).getId());
			}
		}
		if(query.getOrderBy()==null || query.getOrderBy().equals("")){
			query.setOrderBy("COURSE_PROGRESS ASC");
		}
		service.listByObj(query);
		//查询学校名称
		List<SocietyStudentAndCourseView> listV = query.getList();
		for(SocietyStudentAndCourseView view : listV){
			SocietySchool ss = societySchoolService.loadById(view.getOwnerSchoolId());
			view.setOwnerSchoolId(ss.getSchoolName());
		}
		buildResponse(modelAndView,query);
		return modelAndView;
	}
	

	/**
	 * 新增修改
	 * @param voObj
	 * @return
	 */
	@ApiOperation(value = "新增修改SocietyStudentAndCourse", notes = "新增修改SocietyStudentAndCourse")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/saveOrUpdate",method = RequestMethod.POST)
	public ModelAndView saveOrUpdate(SocietyStudentAndCourse voObj){
		ModelAndView modelAndView = new ModelAndView();
		String errMsg = "";
		String id = voObj.getId();
		if(id==null || id.trim().equals("")){
			errMsg = service.insert(voObj);
		}else{
			errMsg = service.update(voObj);
		}
		if(errMsg!=null && !errMsg.equals("")){
			buildErrorResponse(modelAndView, errMsg);
		}else{
			buildResponse(modelAndView);
		}
		return modelAndView;
	}
	
	
	/**
	 * 批量删除
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "根据ID批量删除SocietyStudentAndCourse", notes = "根据ID批量删除SocietyStudentAndCourse")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/deleteByIds",method = RequestMethod.POST)
	public ModelAndView delete(String ids){
		ModelAndView modelAndView = new ModelAndView();
		String[] arr = ids.split(",");
		List<String> list = new ArrayList<String>();
		for(String str : arr){
			list.add(str);
		}
		service.deleteByIds(list);		
		return buildResponse(modelAndView);
	}
	
	
	/**
	 * 根据主键加载
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "根据ID加载SocietyStudentAndCourse", notes = "根据ID加载SocietyStudentAndCourse")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/loadById",method = RequestMethod.POST)
	public ModelAndView  loadById(String id){
		ModelAndView modelAndView = new ModelAndView();
		return buildResponse(modelAndView, service.loadById(id));
	}

	@RequestMapping(value = "/selectBySchoolName",method = RequestMethod.POST)
	public ModelAndView selectBySchoolName(@ModelAttribute SocietyStudentAndCourseQuery query){
		ModelAndView modelAndView = new ModelAndView();
		service.selectBySchoolNamelistPage(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}


	/**
	 * 学员管理下查看学员所在的班级 返回进度
	 * @param studentId
	 * @return
	 */
	@RequestMapping(value = "/selectByStuIdAndSchoolId",method = RequestMethod.POST)
	public ModelAndView selectByStuIdAndSchoolId(String studentId){
		ModelAndView modelAndView = new ModelAndView();
		User user = getLoginUser();
		SocietyStudentAndCourseView societyStudentAndCourseView =
				service.selectByStuIdAndSchoolId(studentId,user.getCompId());
		return buildResponse(modelAndView,societyStudentAndCourseView);
	}
}
