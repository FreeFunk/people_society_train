package com.edgedo.society.controller;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.edgedo.common.base.BaseController;
import com.edgedo.society.entity.*;
import com.edgedo.society.queryvo.SocietySchoolCourseNodeQuestionQuery;
import com.edgedo.society.queryvo.SocietySchoolCourseNodeQuestionView;
import com.edgedo.society.queryvo.SocietyStudentPractiseQuestOptionView;
import com.edgedo.society.queryvo.SocietyStudentPractiseQuestionQuery;
import com.edgedo.society.service.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;


@Api(tags = "SocietyStudentPractiseQuestion")
@Controller
@RequestMapping("/practis")
public class SocietyStudentPractiseQuestionController extends BaseController{
	
	@Autowired
	private SocietyStudentPractiseQuestionService stuQueService;
	@Autowired
	private SocietyStudentPractiseQuestOptionService stuQuestOptionService;
	//课程章节的习题服务
	@Autowired
	private SocietySchoolCourseNodeQuestionService courseNodeQuestionService;

	@Autowired
	private SocietyStudentAndNodeService studentAndNodeService;

	@Autowired
	private SocietyStudentService studentService;
	@Autowired
	private SocietyStudentUniqueService studentUniqueService;
	@Autowired
	private SocietyStudentAndCourseService studentAndCourseService;
	/**
	 * 根据章节加载习题
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "分页查询SocietyStudentPractiseQuestion", notes = "分页查询SocietyStudentPractiseQuestion")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listByNode",method = RequestMethod.POST)
	public ModelAndView listByNode(
			@ModelAttribute SocietySchoolCourseNodeQuestionQuery query){
		String stuNodeId = query.getQueryObj().getStuNodeId();
		ModelAndView modelAndView = new ModelAndView();
		SocietyStudentUnique studentUnique = getLoginStudent(studentUniqueService);
		String courseNodeId = query.getQueryObj().getOwnerNodeId();
		if(courseNodeId==null || courseNodeId.equals("")){
			return buildErrorResponse(modelAndView,"未找到课程章节");
		}
		//加载课程中的题目
		query.setOrderBy(" ORDER_NUM asc ");

		//获得用户选择的答案返回前台在前台显示组装
		String idCardNum = studentUnique.getId();
		List<SocietyStudentPractiseQuestOptionView> stuOpAnswerList = stuQuestOptionService.listByStuAndCouseNodeOfSelect(
				idCardNum,courseNodeId,stuNodeId);

		courseNodeQuestionService.listPageWithStuAnswer(query,stuOpAnswerList);

		buildResponse(modelAndView,query);
		return modelAndView;
	}

	/**
	 * 用户点击提交练习
	 * @return
	 */
	@ApiOperation(value = "分页查询SocietyStudentPractiseQuestion", notes = "分页查询SocietyStudentPractiseQuestion")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/submitPractis",method = RequestMethod.POST)
	public ModelAndView submitPractis(
		String stuNodeId,
		String queIds,
		String selectIds
	){
		ModelAndView modelAndView = new ModelAndView();
		if(queIds.length()==0 ){
			return buildErrorResponse(modelAndView,"param error");
		}
		SocietyStudentUnique studentUnique = getLoginStudent(studentUniqueService);
		SocietyStudentAndNode stuNode = studentAndNodeService.loadById(stuNodeId);
		//判断这个学生点匹配学员情况
		String stuIdCardNum = stuNode.getStudentIdCardNum();
		if(!studentUnique.getId().equals(stuIdCardNum)){
			return buildErrorResponse(modelAndView,"not same stu id");
		}
		String stuId = stuNode.getStudentId();
		SocietyStudent schStu =  studentService.loadById(stuId);
		if(schStu == null){
			return buildErrorResponse(modelAndView,"未查询到学员信息！");
		}
		stuQuestOptionService.updateAllStuNodeOptionUnSelect(stuNodeId);
		String answerStates = stuQueService.submitPractis(stuNode,queIds,selectIds);
		//判断课程是否完成
		String questionIsPass = stuNode.getQuestionIsPass();
		if(questionIsPass!=null && questionIsPass.equals("1")){
			studentAndCourseService.updateFreshLearnInfo(stuNode.getOwnerStudentAndCourseId(),stuNode.getOwnerCourseId(),schStu);
		}
		Map<String,Object> resMap = new HashMap<String,Object>();
		resMap.put("answerStates",answerStates);
		resMap.put("stuNode",stuNode);
		return buildResponse(modelAndView,resMap);
	}


	/**
	 * 用户点击重新答题
	 * @return
	 */
	@ApiOperation(value = "用户点击重新答题", notes = "用户点击重新答题")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/reTestPractise",method = RequestMethod.POST)
	public ModelAndView reTestPractise(
			String stuNodeId
	){
		ModelAndView modelAndView = new ModelAndView();

		SocietyStudentUnique studentUnique = getLoginStudent(studentUniqueService);
		SocietyStudentAndNode stuNode = studentAndNodeService.loadById(stuNodeId);
		//判断这个学生点匹配学员情况
		String stuIdCardNum = stuNode.getStudentIdCardNum();
		if(!studentUnique.getId().equals(stuIdCardNum)){
			return buildErrorResponse(modelAndView,"not same stu id");
		}
		stuQueService.reTestPractise(stuNode);
		return buildResponse(modelAndView,stuNode);
	}


	

}
