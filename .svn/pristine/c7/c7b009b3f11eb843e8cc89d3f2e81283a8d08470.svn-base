package com.edgedo.society.controller;


import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.TreeSet;
import java.util.stream.Collectors;

import com.edgedo.common.base.BaseController;
import com.edgedo.common.shiro.User;
import com.edgedo.society.constant.CommonConstant;
import com.edgedo.society.entity.SocietyNodeResources;
import com.edgedo.society.queryvo.SocietyNodeResourcesQuery;
import com.edgedo.society.queryvo.SocietyNodeResourcesView;
import com.edgedo.society.queryvo.SocietySchoolCourseView;
import com.edgedo.society.service.SocietyNodeResourcesService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;


@Api(tags = "SocietyNodeResources")
@Controller
@RequestMapping("/society/societyNodeResources")
public class SocietyNodeResourcesController extends BaseController{
	
	@Autowired
	private SocietyNodeResourcesService service;
	
	/**
	 * 分页查询
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "分页查询SocietyNodeResources", notes = "分页查询SocietyNodeResources")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listpage",method = RequestMethod.POST)
	public ModelAndView listpage(@ModelAttribute SocietyNodeResourcesQuery query){
		ModelAndView modelAndView = new ModelAndView();
//		query.getQueryObj().setIsOpen(CommonConstant.COURSE_OPON_STATUS);
		query.getQueryObj().setDataState(CommonConstant.DATA_STATUS_ON);
		List<SocietyNodeResourcesView> list = service.listPage(query);

		List<SocietyNodeResourcesView> filterList = list.stream().collect(	Collectors.collectingAndThen(
				Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(sv ->
						sv.getOwnerSchoolId()+";"+sv.getOwnerMajorId()+";"+sv.getOwnerCourseClsId()+";"+sv.getOwnerCourseId()))),
				ArrayList::new));

		String nowSchoolId = getLoginUser().getCompId();
		for(SocietyNodeResourcesView k:filterList){
			String ownerSchoolId = k.getOwnerSchoolId();
			String ownerMajorId = k.getOwnerMajorId();
			String courseClsId = k.getOwnerCourseClsId();
			String courseId = k.getOwnerCourseId();
			for (SocietyNodeResourcesView s:list){
				if(StringUtils.equals(ownerSchoolId,s.getOwnerSchoolId()) &&
						StringUtils.equals(ownerMajorId,s.getOwnerMajorId())&&
						StringUtils.equals(courseClsId,s.getOwnerCourseClsId())&&
						StringUtils.equals(courseId,s.getOwnerCourseId())&&
						StringUtils.equals(nowSchoolId,s.getApplySchoolId())
				){
					k.setShowFlg(0);
					break;
				}else{
					k.setShowFlg(1);
				}
			}
		}

        query.setList(filterList);
		query.setTotalCount(filterList.size());
		buildResponse(modelAndView,query);
		return modelAndView;
	}


	//我的课件  所属学校 和  申请学校是我的
	@RequestMapping(value = "/getMyOpenResources",method = RequestMethod.POST)
	public ModelAndView getMyOpenResources(@ModelAttribute SocietyNodeResourcesQuery query){
		ModelAndView modelAndView = new ModelAndView();
		User user = getLoginUser();
		String schoolId = user.getCompId();
		SocietyNodeResourcesView societyNodeResourcesView =  query.getQueryObj();
//		societyNodeResourcesView.setIsOpen(CommonConstant.COURSE_OPON_STATUS);
		societyNodeResourcesView.setApplySchoolId(schoolId);
		societyNodeResourcesView.setDataState(CommonConstant.DATA_STATUS_ON);
		service.listPage(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}

	@RequestMapping(value = "/joinToMyResources",method = RequestMethod.POST)
	public ModelAndView joinToMyCourse(String ids){
		ModelAndView modelAndView = new ModelAndView();
		User user = getLoginUser();
		service.joinToMyResources(user,ids);
		return buildResponse(modelAndView);
	}

	/**
	 * 新增修改
	 * @param voObj
	 * @return
	 */
	@ApiOperation(value = "新增修改SocietyNodeResources", notes = "新增修改SocietyNodeResources")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/saveOrUpdate",method = RequestMethod.POST)
	public ModelAndView saveOrUpdate(SocietyNodeResources voObj){
		ModelAndView modelAndView = new ModelAndView();
		String errMsg = "";
		String id = voObj.getId();
		if(id==null || id.trim().equals("")){
			errMsg = service.insert(voObj);
		}else{
			errMsg = service.update(voObj);
		}
		if(errMsg!=null && !errMsg.equals("")){
			buildErrorResponse(modelAndView, errMsg);
		}else{
			buildResponse(modelAndView);
		}
		return modelAndView;
	}
	
	
	/**
	 * 批量删除
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "根据ID批量删除SocietyNodeResources", notes = "根据ID批量删除SocietyNodeResources")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/deleteByIds",method = RequestMethod.POST)
	public ModelAndView delete(String ids){
		ModelAndView modelAndView = new ModelAndView();
		String[] arr = ids.split(",");
		List<String> list = new ArrayList<String>();
		for(String str : arr){
			list.add(str);
		}
		service.deleteByIds(list);		
		return buildResponse(modelAndView);
	}
	
	
	/**
	 * 根据主键加载
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "根据ID加载SocietyNodeResources", notes = "根据ID加载SocietyNodeResources")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/loadById",method = RequestMethod.POST)
	public ModelAndView  loadById(String id){
		ModelAndView modelAndView = new ModelAndView();
		return buildResponse(modelAndView, service.loadById(id));
	}
	
	
}
